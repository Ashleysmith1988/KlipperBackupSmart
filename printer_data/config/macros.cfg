[gcode_macro PRINT_START]
gcode:
  {% set BED = params.BED_TEMP|int %}
  {% set EXTRUDER = params.EXTRUDER_TEMP|int %}
  M190 S{BED}  ;Set bed temperature and wait
  M109 S{EXTRUDER}  ;Set extruder temperature and wait
  G28  ;Home all Axes
  BED_MESH_PROFILE LOAD=default  ;Load Bed Mesh Profile
 


[gcode_macro M190]
rename_existing: M190.1
gcode:
  {% if printer["gcode_macro status_heating"] != null %}
    status_heating
  {% endif %}
    M190.1 { rawparams }
  {% if printer["gcode_macro status_ready"] != null %}
    status_ready
  {% endif %}


[gcode_macro M109]
rename_existing: M109.1
gcode:
  {% if printer["gcode_macro status_heating"] != null %}
    status_heating
  {% endif %}
    M109.1 { rawparams }
  {% if printer["gcode_macro status_ready"] != null %}
    status_ready
  {% endif %}


[gcode_macro _PURGE_LINE]
gcode:
  {% if printer["gcode_macro status_cleaning"] != null %}
    status_cleaning
  {% endif %}
  SAVE_GCODE_STATE NAME=Pre_Prime
        
  G90
  G92 E0 ;Reset Extruder

  G1 Z10.0 F3000 ;Move Z Axis up
  G1 X0 Y0;
  G1 E10.0 F1800
  G1 Z0.28 F5000.0 ;Move to start position
  G1 X150 Y0 Z0.28 F1500.0 E30 ;Draw the first line
  G92 E0 ;Reset Extruder
  G1 Z10 F3000 ;Move Z Axis up
  RESTORE_GCODE_STATE NAME=Pre_Prime

  {% if printer["gcode_macro status_printing"] != null %}
    status_printing
  {% endif %}

[gcode_macro PRINT_END]
gcode:
  G91
  G1 Z10 F3000  ;Move Up
  # G1 E-18 F1800  ;Retract filament
  G90
  G28 X  ;Home X axis
  M106 S0  ;Part cooling fan speed
  TURN_OFF_HEATERS  ;Turn off heaters
  M84  ;Disable motors


#[gcode_macro _CLIENT_VARIABLE]
#variable_use_custom_pos  : True  ; use custom park coordinates for x,y [True/False] 
#variable_custom_park_x   : 10.0 ; custom x position; value must be within your defined min and max of X
#variable_custom_park_y   : 10.0  ; custom y position; value must be within your defined min and max of Y
#variable_custom_park_dz   : 2.0   ; custom dz value; the value in mm to lift the nozzle when move to park position
#variable_retract          : 1.0   ; the value to retract while PAUSE
#variable_cancel_retract   : 5.0   ; the value to retract while CANCEL_PRINT
#variable_speed_retract    : 35.0  ; retract speed in mm/s
#variable_unretract        : 1.0   ; the value to unretract while RESUME
#variable_speed_unretract  : 35.0  ; unretract speed in mm/s
#variable_speed_hop        : 15.0  ; z move speed in mm/s
#variable_speed_move       : 100.0 ; move speed in mm/s
#variable_park_at_cancel   : False ; allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
#variable_park_at_cancel_x : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
#variable_park_at_cancel_y : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
## !!! Caution [firmware_retraction] must be defined in the printer.cfg if you set use_fw_retract: True !!!
#variable_use_fw_retract   : False ; use fw_retraction instead of the manual version [True/False]
#variable_idle_timeout     : 0     ; time in sec until idle_timeout kicks in. Value 0 means that no value will be set or restored
#variable_runout_sensor    : ""    ; If a sensor is defined, it will be used to cancel the execution of RESUME in case no filament is detected.
##                                   Specify the config name of the runout sensor e.g "filament_switch_sensor runout". Hint use the same as in your printer.cfg
## !!! Custom macros, please use with care and review the section of the corresponding macro.
## These macros are for simple operations like setting a status LED. Please make sure your macro does not interfere with the basic macro functions.
## Only  single line commands are supported, please create a macro if you need more than one command.
#variable_user_pause_macro : ""    ; Everything insight the "" will be executed after the klipper base pause (PAUSE_BASE) function
#variable_user_resume_macro: ""    ; Everything insight the "" will be executed before the klipper base resume (RESUME_BASE) function
#variable_user_cancel_macro: ""    ; Everything insight the "" will be executed before the klipper base cancel (CANCEL_PRINT_BASE) function



[gcode_macro SET_ACTIVE_SPOOL]
gcode:
  {% if params.ID %}
    {% set id = params.ID|int %}
    {action_call_remote_method(
       "spoolman_set_active_spool",
       spool_id=id
    )}
  {% else %}
    {action_respond_info("Parameter 'ID' is required")}
  {% endif %}

[gcode_macro CLEAR_ACTIVE_SPOOL]
gcode:
  {action_call_remote_method(
    "spoolman_set_active_spool",
    spool_id=None
  )}



  